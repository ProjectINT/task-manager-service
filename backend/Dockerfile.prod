# syntax=docker/dockerfile:1

# Build stage
FROM node:20-alpine AS builder

WORKDIR /workspace

# Copy monorepo root package files
COPY package*.json ./

# Copy backend package files
COPY backend/package*.json ./backend/

# Install ALL dependencies (including devDependencies for build)
RUN npm install --workspace=backend

# Copy shared validation module
COPY validation ./validation

# Copy backend source and prisma schema
COPY backend ./backend

# Generate Prisma client
WORKDIR /workspace/backend
RUN npx prisma generate

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS production

WORKDIR /app

# Install production dependencies only
COPY package*.json ./
COPY backend/package*.json ./backend/

# Copy validation module first (needed for install)
COPY --from=builder /workspace/validation ./validation

# Copy prisma schema (needed for prisma generate)
COPY --from=builder /workspace/backend/prisma ./backend/prisma

# Install production dependencies and generate Prisma client
RUN npm install --workspace=backend --omit=dev && \
    cd backend && \
    npx prisma generate

# Copy built application from builder
COPY --from=builder /workspace/backend/dist ./backend/dist

WORKDIR /app/backend

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    chown -R nodejs:nodejs /app

USER nodejs

EXPOSE 3001

ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

CMD ["node", "dist/backend/src/main.js"]
