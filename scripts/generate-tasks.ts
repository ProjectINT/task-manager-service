import * as fs from 'fs';
import * as path from 'path';

// –¢–∏–ø—ã
enum TaskStatus {
  pending = 'pending',
  in_progress = 'in_progress',
  completed = 'completed',
  cancelled = 'cancelled',
}

interface Task {
  title: string;
  description?: string;
  status?: TaskStatus;
  dueDate?: string;
}

// 10 standard task templates
const TASK_TEMPLATES = [
  {
    title: 'Prepare sales report',
    description: 'Create detailed sales report for current quarter with trend analysis',
  },
  {
    title: 'Conduct team meeting',
    description: 'Weekly meeting to discuss project progress and plan upcoming tasks',
  },
  {
    title: 'Update project documentation',
    description: 'Add new sections and update outdated information in documentation',
  },
  {
    title: 'Check and reply to emails',
    description: 'Process incoming emails and respond to important client requests',
  },
  {
    title: 'Develop new feature',
    description: 'Implement data export functionality in various formats',
  },
  {
    title: 'Conduct code review',
    description: 'Review pull requests and leave comments for code improvements',
  },
  {
    title: 'Optimize performance',
    description: 'Find and fix bottlenecks in the application, improve loading time',
  },
  {
    title: 'Prepare presentation',
    description: 'Create presentation to demonstrate new product to potential clients',
  },
  {
    title: 'Conduct testing',
    description: 'Perform complete testing of new functionality before release',
  },
  {
    title: 'Update project dependencies',
    description: 'Check and update outdated packages, fix potential compatibility issues',
  },
];

const STATUSES: TaskStatus[] = [
  TaskStatus.pending,
  TaskStatus.in_progress,
  TaskStatus.completed,
  TaskStatus.cancelled,
];

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É –º–µ–∂–¥—É —Å–µ–≥–æ–¥–Ω—è –∏ –∫–æ–Ω—Ü–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
 */
function generateRandomDate(): string {
  const today = new Date();
  const endOfNextMonth = new Date(today.getFullYear(), today.getMonth() + 2, 0);

  const startTimestamp = today.getTime();
  const endTimestamp = endOfNextMonth.getTime();

  const randomTimestamp = startTimestamp + Math.random() * (endTimestamp - startTimestamp);
  const randomDate = new Date(randomTimestamp);

  return randomDate.toISOString();
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å
 */
function generateRandomStatus(): TaskStatus {
  return STATUSES[Math.floor(Math.random() * STATUSES.length)];
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
 */
function generateTasks(count: number): Task[] {
  const tasks: Task[] = [];

  for (let i = 0; i < count; i++) {
    const template = TASK_TEMPLATES[i % TASK_TEMPLATES.length];
    const task: Task = {
      title: `${template.title} #${i + 1}`,
      description: template.description,
      status: generateRandomStatus(),
      dueDate: generateRandomDate(),
    };
    tasks.push(task);
  }

  return tasks;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ JSON —Ñ–∞–π–ª
 */
function saveTasks(tasks: Task[], filename: string): void {
  const filePath = path.join(__dirname, filename);
  fs.writeFileSync(filePath, JSON.stringify(tasks, null, 2), 'utf-8');
  console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª: ${filePath}`);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
async function createTask(task: Task, apiUrl: string): Promise<any> {
  try {
    const response = await fetch(`${apiUrl}/api/tasks`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(task),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ "${task.title}":`, error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ –æ—á–µ—Ä–µ–¥–∏
 */
async function sendTasksToServer(tasks: Task[], apiUrl: string): Promise<void> {
  console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ${tasks.length} –∑–∞–¥–∞—á –Ω–∞ ${apiUrl}...`);

  const results = {
    success: 0,
    failed: 0,
  };

  for (let i = 0; i < tasks.length; i++) {
    const task = tasks[i];
    try {
      process.stdout.write(`\rüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ ${i + 1}/${tasks.length}...`);
      await createTask(task, apiUrl);
      results.success++;

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 50));
    } catch (error) {
      results.failed++;
    }
  }

  console.log(`\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${results.success}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.failed}`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
 */
async function checkServerHealth(apiUrl: string): Promise<boolean> {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ ${apiUrl}...`);
    const response = await fetch(`${apiUrl}/api`);
    if (response.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    }
    console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return false;
  } catch (error) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const TASKS_COUNT = 100;
  const API_URL = process.env.API_URL || 'http://localhost:3000';
  const OUTPUT_FILE = 'generated-tasks.json';

  console.log('üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞—á');
  console.log('='.repeat(50));
  console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: ${TASKS_COUNT}`);
  console.log(`üåê API URL: ${API_URL}`);
  console.log(`üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${OUTPUT_FILE}`);
  console.log('='.repeat(50));

  // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
  console.log('\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á...');
  const tasks = generateTasks(TASKS_COUNT);
  console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${tasks.length} –∑–∞–¥–∞—á`);

  // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
  saveTasks(tasks, OUTPUT_FILE);

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  const serverAvailable = await checkServerHealth(API_URL);

  if (!serverAvailable) {
    console.log('\n‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –∫–æ–º–∞–Ω–¥–æ–π: npm run dev:backend');
    console.log('–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è API_URL –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –∞–¥—Ä–µ—Å–∞.');
    process.exit(1);
  }

  // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  await sendTasksToServer(tasks, API_URL);

  console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
}

// –ó–∞–ø—É—Å–∫
main().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
