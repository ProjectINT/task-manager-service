import * as fs from 'fs';
import * as path from 'path';

interface Task {
  title: string;
  description: string;
  status: string;
  dueDate: string;
}

const API_URL = 'http://localhost:3001/api/tasks';
const TASKS_FILE = path.join(__dirname, 'generated-tasks.json');

async function loadTasks(): Promise<Task[]> {
  try {
    const data = fs.readFileSync(TASKS_FILE, 'utf-8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Ç–∞—Å–∫–∞–º–∏:', error);
    process.exit(1);
  }
}

async function createTask(task: Task, index: number): Promise<boolean> {
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(task),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞—Å–∫–∏ #${index + 1}:`, {
        status: response.status,
        statusText: response.statusText,
        error: errorText,
      });
      return false;
    }

    const createdTask = (await response.json()) as { id: string };
    console.log(`‚úÖ –¢–∞—Å–∫–∞ #${index + 1} —Å–æ–∑–¥–∞–Ω–∞:`, {
      id: createdTask.id,
      title: task.title,
      status: task.status,
    });
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞—Å–∫–∏ #${index + 1}:`, error);
    return false;
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...');
    const response = await fetch(API_URL);
    if (!response.ok) {
      console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω.');
      process.exit(1);
    }
    console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω\n');
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API:', error);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω: npm run dev:backend');
    process.exit(1);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞—Å–æ–∫
  const tasks = await loadTasks();
  console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tasks.length} —Ç–∞—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞\n`);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Å–æ–∫
  let successCount = 0;
  let failCount = 0;

  for (let i = 0; i < tasks.length; i++) {
    const task = tasks[i];
    const success = await createTask(task, i);

    if (success) {
      successCount++;
    } else {
      failCount++;
      console.log('\n‚ö†Ô∏è  –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
      break;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < tasks.length - 1) {
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n' + '='.repeat(50));
  console.log('üìä –ò–¢–û–ì–ò:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${failCount}`);
  console.log(`üìù –í—Å–µ–≥–æ —Ç–∞—Å–æ–∫: ${tasks.length}`);
  console.log('='.repeat(50));

  if (failCount > 0) {
    process.exit(1);
  }
}

main();
