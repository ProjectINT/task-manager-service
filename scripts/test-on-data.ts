import * as fs from 'fs';
import * as path from 'path';

const API_URL = 'http://localhost:3001/api/tasks';

interface Task {
  id: string;
  title: string;
  description: string | null;
  status: string;
  dueDate: string | null;
  createdAt: string;
  updatedAt: string;
}

interface PaginatedResponse {
  data: Task[];
  meta: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
}

interface Counters {
  pending: number;
  in_progress: number;
  completed: number;
  cancelled: number;
  total: number;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logSection(title: string) {
  console.log('\n' + '='.repeat(60));
  console.log(`üß™ ${title}`);
  console.log('='.repeat(60));
}

function logSuccess(message: string) {
  console.log(`‚úÖ ${message}`);
}

function logError(message: string, error?: unknown) {
  console.log(`‚ùå ${message}`);
  if (error) {
    console.error(error);
  }
}

function logInfo(message: string, data?: unknown) {
  console.log(`‚ÑπÔ∏è  ${message}`);
  if (data) {
    console.log(JSON.stringify(data, null, 2));
  }
}

// –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞—Å–æ–∫
async function testGetTasks() {
  logSection('–¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞—Å–æ–∫');

  try {
    // –¢–µ—Å—Ç 1.1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    console.log('\nüìÑ –¢–µ—Å—Ç 1.1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ª–∏–º–∏—Ç 10)');
    const response1 = await fetch(`${API_URL}?page=1&limit=10`);

    if (!response1.ok) {
      logError(`–û—à–∏–±–∫–∞: ${response1.status} ${response1.statusText}`);
      return false;
    }

    const result1 = (await response1.json()) as PaginatedResponse;
    logSuccess(`–ü–æ–ª—É—á–µ–Ω–æ ${result1.data.length} —Ç–∞—Å–æ–∫ –∏–∑ ${result1.meta.total}`);
    logInfo('–ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', result1.meta);
    logInfo('–ü–µ—Ä–≤–∞—è —Ç–∞—Å–∫–∞', result1.data[0]);

    // –¢–µ—Å—Ç 1.2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    console.log('\nüìÑ –¢–µ—Å—Ç 1.2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É "completed"');
    const response2 = await fetch(`${API_URL}?status=completed&limit=5`);

    if (!response2.ok) {
      logError(`–û—à–∏–±–∫–∞: ${response2.status} ${response2.statusText}`);
      return false;
    }

    const result2 = (await response2.json()) as PaginatedResponse;
    logSuccess(`–ù–∞–π–¥–µ–Ω–æ ${result2.meta.total} –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞—Å–æ–∫`);
    logInfo('–ü—Ä–∏–º–µ—Ä—ã completed —Ç–∞—Å–æ–∫', result2.data.slice(0, 3));

    // –¢–µ—Å—Ç 1.3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('\nüìÑ –¢–µ—Å—Ç 1.3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ª–∏–º–∏—Ç 20)');
    const response3 = await fetch(`${API_URL}?page=2&limit=20`);

    if (!response3.ok) {
      logError(`–û—à–∏–±–∫–∞: ${response3.status} ${response3.statusText}`);
      return false;
    }

    const result3 = (await response3.json()) as PaginatedResponse;
    logSuccess(`–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${result3.meta.page} –∏–∑ ${result3.meta.totalPages}`);
    logInfo('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ', result3.data.length);

    return true;
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞—Å–æ–∫', error);
    return false;
  }
}

// –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤
async function testGetCounters() {
  logSection('–¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º');

  try {
    const response = await fetch(`${API_URL}/counters`);

    if (!response.ok) {
      logError(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      return false;
    }

    const counters = (await response.json()) as Counters;
    logSuccess('–°—á—ë—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã');

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    console.log(`   ‚è≥ Pending:     ${counters.pending}`);
    console.log(`   üîÑ In Progress: ${counters.in_progress}`);
    console.log(`   ‚úÖ Completed:   ${counters.completed}`);
    console.log(`   ‚ùå Cancelled:   ${counters.cancelled}`);
    console.log(`   üìù –í—Å–µ–≥–æ:       ${counters.total}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    const sum = counters.pending + counters.in_progress + counters.completed + counters.cancelled;
    if (sum === counters.total) {
      logSuccess('–°—É–º–º–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É');
    } else {
      logError(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: —Å—É–º–º–∞ = ${sum}, total = ${counters.total}`);
    }

    return true;
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á—ë—Ç—á–∏–∫–æ–≤', error);
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Å–∫–∏ –ø–æ ID
async function testGetTaskById(): Promise<string | null> {
  logSection('–¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Å–∫–∏ –ø–æ ID');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID
    console.log('\nüîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ ID...');
    const listResponse = await fetch(`${API_URL}?limit=1`);

    if (!listResponse.ok) {
      logError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Å–æ–∫');
      return null;
    }

    const list = (await listResponse.json()) as PaginatedResponse;
    if (list.data.length === 0) {
      logError('–í –±–∞–∑–µ –Ω–µ—Ç —Ç–∞—Å–æ–∫');
      return null;
    }

    const taskId = list.data[0].id;
    console.log(`\nüìå –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å ID: ${taskId}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Å–∫—É –ø–æ ID
    const response = await fetch(`${API_URL}/${taskId}`);

    if (!response.ok) {
      logError(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      return null;
    }

    const task = (await response.json()) as Task;
    logSuccess('–¢–∞—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
    logInfo('–î–∞–Ω–Ω—ã–µ —Ç–∞—Å–∫–∏', task);

    return taskId;
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞—Å–∫–∏ –ø–æ ID', error);
    return null;
  }
}

// –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞—Å–∫–∏
async function testUpdateTask(taskId: string) {
  logSection('–¢–ï–°–¢ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞—Å–∫–∏');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log(`\nüìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Å–∫—É ${taskId}`);
    const getResponse = await fetch(`${API_URL}/${taskId}`);

    if (!getResponse.ok) {
      logError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞—Å–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return false;
    }

    const originalTask = (await getResponse.json()) as Task;
    logInfo('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞—Å–∫–∏', {
      title: originalTask.title,
      status: originalTask.status,
      description: originalTask.description,
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Å–∫—É
    const updateData = {
      title: `${originalTask.title} (UPDATED)`,
      description: `${originalTask.description || ''} - Updated at ${new Date().toLocaleString()}`,
      status: originalTask.status === 'pending' ? 'in_progress' : originalTask.status,
    };

    console.log('\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    const updateResponse = await fetch(`${API_URL}/${taskId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updateData),
    });

    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      logError(`–û—à–∏–±–∫–∞: ${updateResponse.status} ${updateResponse.statusText}`, errorText);
      return false;
    }

    const updatedTask = (await updateResponse.json()) as Task;
    logSuccess('–¢–∞—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    logInfo('–ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞—Å–∫–∏', {
      title: updatedTask.title,
      status: updatedTask.status,
      description: updatedTask.description,
      updatedAt: updatedTask.updatedAt,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    if (updatedTask.title === updateData.title) {
      logSuccess('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
    } else {
      logError('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è');
    }

    return true;
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞—Å–∫–∏', error);
    return false;
  }
}

// –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞—Å–∫–∏
async function testCreateTask() {
  logSection('–¢–ï–°–¢ 5: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞—Å–∫–∏');

  try {
    const newTask = {
      title: `Test Task - Created at ${new Date().toLocaleString()}`,
      description: 'This is a test task created by automated test script',
      status: 'pending',
      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // +7 –¥–Ω–µ–π
    };

    console.log('\n‚ûï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–∞—Å–∫—É...');
    logInfo('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è', newTask);

    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newTask),
    });

    if (!response.ok) {
      const errorText = await response.text();
      logError(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`, errorText);
      return null;
    }

    const createdTask = (await response.json()) as Task;
    logSuccess('–¢–∞—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    logInfo('–°–æ–∑–¥–∞–Ω–Ω–∞—è —Ç–∞—Å–∫–∞', createdTask);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –Ω–∞ –º–µ—Å—Ç–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–∞—Å–∫–∏:');
    if (createdTask.id) logSuccess(`ID –ø—Ä–∏—Å–≤–æ–µ–Ω: ${createdTask.id}`);
    if (createdTask.title === newTask.title) logSuccess('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç');
    if (createdTask.description === newTask.description) logSuccess('–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç');
    if (createdTask.status === newTask.status) logSuccess('–°—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç');
    if (createdTask.createdAt) logSuccess('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    if (createdTask.updatedAt) logSuccess('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

    return createdTask.id;
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞—Å–∫–∏', error);
    return null;
  }
}

// –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–∏ (–±–æ–Ω—É—Å–Ω—ã–π —Ç–µ—Å—Ç)
async function testDeleteTask(taskId: string) {
  logSection('–¢–ï–°–¢ 6: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–∏ (BONUS)');

  try {
    console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —Ç–∞—Å–∫—É ${taskId}`);

    const response = await fetch(`${API_URL}/${taskId}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      const errorText = await response.text();
      logError(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`, errorText);
      return false;
    }

    logSuccess('–¢–∞—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞...');
    const checkResponse = await fetch(`${API_URL}/${taskId}`);

    if (checkResponse.status === 404) {
      logSuccess('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —Ç–∞—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)');
      return true;
    } else {
      logError(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${checkResponse.status}`);
      return false;
    }
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞—Å–∫–∏', error);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–• –¢–ï–°–¢–û–í API');
  console.log('üìÖ –î–∞—Ç–∞: ' + new Date().toLocaleString());
  console.log('üåê API URL: ' + API_URL);

  const results: { [key: string]: boolean } = {};
  let newTaskId: string | null = null;
  let existingTaskId: string | null = null;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  logSection('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API');
  try {
    const response = await fetch(API_URL);
    if (response.ok) {
      logSuccess('API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç');
    } else {
      logError('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
      process.exit(1);
    }
  } catch (error) {
    logError('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω.', error);
    process.exit(1);
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
  results['–¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞'] = await testGetTasks();
  results['–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤'] = await testGetCounters();

  existingTaskId = await testGetTaskById();
  results['–¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ ID'] = existingTaskId !== null;

  if (existingTaskId) {
    results['–¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–∏'] = await testUpdateTask(existingTaskId);
  } else {
    results['–¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–∏'] = false;
    logError('–ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID');
  }

  newTaskId = await testCreateTask();
  results['–¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Å–∫–∏'] = newTaskId !== null;

  if (newTaskId) {
    results['–¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–∏'] = await testDeleteTask(newTaskId);
  } else {
    results['–¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–∏'] = false;
    logError('–ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è');
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
  logSection('–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢');

  let passedCount = 0;
  let failedCount = 0;

  console.log();
  Object.entries(results).forEach(([testName, passed]) => {
    if (passed) {
      console.log(`‚úÖ ${testName}`);
      passedCount++;
    } else {
      console.log(`‚ùå ${testName}`);
      failedCount++;
    }
  });

  console.log('\n' + '='.repeat(60));
  console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedCount}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedCount}`);
  console.log(`   üìù –í—Å–µ–≥–æ: ${passedCount + failedCount}`);
  console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passedCount / (passedCount + failedCount)) * 100).toFixed(1)}%`);
  console.log('='.repeat(60));

  if (failedCount === 0) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ\n');
    process.exit(0);
  } else {
    console.log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨ ‚ö†Ô∏è\n');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
runAllTests();
