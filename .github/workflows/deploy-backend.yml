name: Deploy Backend to Production

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'validation/**'
      - 'docker-compose.prod.yml'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/task-manager-service

            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Deploy with docker compose
            docker compose -f docker-compose.prod.yml up -d

            # Wait for backend to be ready (max 60 seconds)
            echo "Waiting for backend to be ready..."
            for i in $(seq 1 60); do
              if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
                echo "Backend is ready!"
                break
              fi
              if [ $i -eq 60 ]; then
                echo "Backend failed to start within 120 seconds"
                docker compose -f docker-compose.prod.yml logs backend
                exit 1
              fi
              echo "Attempt $i/60: Backend not ready yet, waiting..."
              sleep 2
            done

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Test health endpoint and show status
            if curl -f http://localhost:3001/api/health; then
              echo "✅ Deployment successful!"
              docker compose -f /var/www/task-manager-service/docker-compose.prod.yml ps
            else
              echo "❌ Health check failed"
              exit 1
            fi

      - name: Clean up old images
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Remove unused images older than 24 hours
            docker image prune -af --filter "until=24h"
